{"version":3,"sources":["../src/index.ts","../node_modules/.pnpm/defu@6.1.4/node_modules/defu/dist/defu.mjs","../src/resolve.ts","../node_modules/.pnpm/path-exists@5.0.0/node_modules/path-exists/index.js"],"sourcesContent":["import type { FilterPattern } from '@rollup/pluginutils'\nimport type { JscConfig, Options as SwcOptions, TransformConfig } from '@swc/core'\nimport path from 'node:path'\nimport { createFilter } from '@rollup/pluginutils'\nimport { transform } from '@swc/core'\nimport { defu } from 'defu'\n// @ts-expect-error missing types\nimport { loadTsConfig } from 'load-tsconfig'\nimport { createUnplugin } from 'unplugin'\nimport { resolveId } from './resolve'\n\nexport type Options = SwcOptions & {\n  include?: FilterPattern\n  exclude?: FilterPattern\n  tsconfigFile?: string | boolean\n}\n\ntype WithRequiredProperty<Type, Key extends keyof Type> = Type & {\n  [Property in Key]-?: Type[Property];\n}\n\ntype SWCOptions = WithRequiredProperty<JscConfig, 'parser' | 'transform'>\n\nexport default createUnplugin<Options | undefined, false>(\n  ({ tsconfigFile, minify, include, exclude, ...options } = {}) => {\n    const filter = createFilter(\n      include || /\\.m?[jt]sx?$/,\n      exclude || /node_modules/,\n    )\n\n    return {\n      name: 'swc',\n\n      resolveId,\n\n      async transform(code, id) {\n        if (!filter(id))\n          return null\n\n        const compilerOptions\n          = tsconfigFile === false\n            ? {}\n            : loadTsConfig(\n              path.dirname(id),\n              tsconfigFile === true ? undefined : tsconfigFile,\n            )?.data?.compilerOptions || {}\n\n        const isTs = /\\.m?tsx?$/.test(id)\n\n        let jsc: SWCOptions = {\n          parser: {\n            syntax: isTs ? 'typescript' : 'ecmascript',\n          },\n          transform: {},\n        }\n\n        if (compilerOptions.jsx) {\n          if (jsc.parser.syntax === 'typescript') {\n            jsc.parser.tsx = true\n          }\n          else {\n            jsc.parser.jsx = true\n          }\n          Object.assign<TransformConfig, TransformConfig>(jsc.transform, {\n            react: {\n              pragma: compilerOptions.jsxFactory,\n              pragmaFrag: compilerOptions.jsxFragmentFactory,\n              importSource: compilerOptions.jsxImportSource,\n            },\n          })\n        }\n\n        if (compilerOptions.experimentalDecorators) {\n          // class name is required by type-graphql to generate correct graphql type\n          jsc.keepClassNames = true\n          jsc.parser.decorators = true\n          Object.assign<TransformConfig, TransformConfig>(jsc.transform!, {\n            legacyDecorator: true,\n            decoratorMetadata: compilerOptions.emitDecoratorMetadata,\n          })\n        }\n\n        if (compilerOptions.target) {\n          jsc.target = compilerOptions.target\n        }\n\n        if (compilerOptions.useDefineForClassFields != null) {\n          jsc.transform.useDefineForClassFields = compilerOptions.useDefineForClassFields\n        }\n\n        if (options.jsc) {\n          jsc = defu<SWCOptions, SWCOptions[]>(options.jsc, jsc)\n        }\n\n        const result = await transform(code, {\n          filename: id,\n          sourceMaps: true,\n          ...options,\n          jsc,\n        })\n        return {\n          code: result.code,\n          map: result.map && JSON.parse(result.map),\n        }\n      },\n\n      vite: {\n        config() {\n          return {\n            esbuild: false,\n          }\n        },\n      },\n\n      rollup: {\n        async renderChunk(code, chunk) {\n          if (minify) {\n            const result = await transform(code, {\n              sourceMaps: true,\n              minify: true,\n              filename: chunk.fileName,\n            })\n            return {\n              code: result.code,\n              map: result.map,\n            }\n          }\n          return null\n        },\n      },\n    }\n  },\n)\n","function isPlainObject(value) {\n  if (value === null || typeof value !== \"object\") {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(value);\n  if (prototype !== null && prototype !== Object.prototype && Object.getPrototypeOf(prototype) !== null) {\n    return false;\n  }\n  if (Symbol.iterator in value) {\n    return false;\n  }\n  if (Symbol.toStringTag in value) {\n    return Object.prototype.toString.call(value) === \"[object Module]\";\n  }\n  return true;\n}\n\nfunction _defu(baseObject, defaults, namespace = \".\", merger) {\n  if (!isPlainObject(defaults)) {\n    return _defu(baseObject, {}, namespace, merger);\n  }\n  const object = Object.assign({}, defaults);\n  for (const key in baseObject) {\n    if (key === \"__proto__\" || key === \"constructor\") {\n      continue;\n    }\n    const value = baseObject[key];\n    if (value === null || value === void 0) {\n      continue;\n    }\n    if (merger && merger(object, key, value, namespace)) {\n      continue;\n    }\n    if (Array.isArray(value) && Array.isArray(object[key])) {\n      object[key] = [...value, ...object[key]];\n    } else if (isPlainObject(value) && isPlainObject(object[key])) {\n      object[key] = _defu(\n        value,\n        object[key],\n        (namespace ? `${namespace}.` : \"\") + key.toString(),\n        merger\n      );\n    } else {\n      object[key] = value;\n    }\n  }\n  return object;\n}\nfunction createDefu(merger) {\n  return (...arguments_) => (\n    // eslint-disable-next-line unicorn/no-array-reduce\n    arguments_.reduce((p, c) => _defu(p, c, \"\", merger), {})\n  );\n}\nconst defu = createDefu();\nconst defuFn = createDefu((object, key, currentValue) => {\n  if (object[key] !== void 0 && typeof currentValue === \"function\") {\n    object[key] = currentValue(object[key]);\n    return true;\n  }\n});\nconst defuArrayFn = createDefu((object, key, currentValue) => {\n  if (Array.isArray(object[key]) && typeof currentValue === \"function\") {\n    object[key] = currentValue(object[key]);\n    return true;\n  }\n});\n\nexport { createDefu, defu as default, defu, defuArrayFn, defuFn };\n","import fs from 'node:fs'\nimport path from 'node:path'\nimport { pathExists } from 'path-exists'\n\nconst RESOLVE_EXTENSIONS = ['.tsx', '.ts', '.mts', '.jsx', '.js', '.mjs', '.cjs']\n\nasync function resolveFile(resolved: string, index = false) {\n  for (const ext of RESOLVE_EXTENSIONS) {\n    const file = index\n      ? path.join(resolved, `index${ext}`)\n      : `${resolved}${ext}`\n    if (await pathExists(file))\n      return file\n  }\n}\n\nexport async function resolveId(importee: string, importer?: string) {\n  if (importer && importee[0] === '.') {\n    const absolutePath = path.resolve(\n      // eslint-disable-next-line node/prefer-global/process\n      importer ? path.dirname(importer) : process.cwd(),\n      importee,\n    )\n\n    let resolved = await resolveFile(absolutePath)\n\n    if (\n      !resolved\n      && (await pathExists(absolutePath))\n      && (await fs.promises.stat(absolutePath).then(stat => stat.isDirectory()))\n    ) {\n      resolved = await resolveFile(absolutePath, true)\n    }\n\n    return resolved\n  }\n}\n","import fs, {promises as fsPromises} from 'node:fs';\n\nexport async function pathExists(path) {\n\ttry {\n\t\tawait fsPromises.access(path);\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n}\n\nexport function pathExistsSync(path) {\n\ttry {\n\t\tfs.accessSync(path);\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n}\n"],"mappings":"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","names":["import_node_path","import_node_fs","path","fsPromises","path","fs","path"]}