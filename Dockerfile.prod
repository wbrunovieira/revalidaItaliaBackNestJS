# ───── build stage ─────
FROM node:18-alpine AS builder
WORKDIR /app

COPY package.json pnpm-lock.yaml ./
RUN apk add --no-cache openssl openssl-dev \
  && npm install -g pnpm \
  && pnpm install --frozen-lockfile

COPY prisma ./prisma
ENV PRISMA_CLI_QUERY_ENGINE_TYPE=binary \
  PRISMA_QUERY_ENGINE_TYPE=binary
RUN pnpm exec prisma generate

COPY tsconfig*.json ./
COPY src ./src
RUN echo "=== Debug tsconfig ===" && \
  ls -la tsconfig* && \
  echo "=== Content tsconfig.build.json ===" && \
  cat tsconfig.build.json && \
  echo "=== Building ===" && \
  pnpm run build

# ───── production stage ─────
FROM node:18-alpine AS prod
WORKDIR /app

# Install pnpm first
RUN npm install -g pnpm

# Copy package files and install production dependencies INCLUDING tsconfig-paths
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --prod --frozen-lockfile \
  && pnpm add tsconfig-paths \
  && pnpm store prune \
  && npm cache clean --force

# Copy built application
COPY --from=builder /app/dist ./dist

# Copy Prisma schema and generate client in production stage
COPY --from=builder /app/prisma ./prisma
RUN pnpm exec prisma generate

# Copy tsconfig files for path resolution
COPY tsconfig.base.json ./
COPY tsconfig.prod.json ./tsconfig.json
COPY private.pem ./private.pem
COPY public.pem ./public.pem

COPY private.pem ./private.pem
COPY public.pem ./public.pem

ENV JWT_PRIVATE_KEY_PATH=/app/private.pem
ENV JWT_PUBLIC_KEY_PATH=/app/public.pem

ENV NODE_ENV=production

CMD ["node", "-r", "tsconfig-paths/register", "dist/main"]