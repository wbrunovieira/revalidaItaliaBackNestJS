# ───── build stage ─────
FROM node:18-alpine AS builder
WORKDIR /app

COPY package.json pnpm-lock.yaml ./
RUN apk add --no-cache openssl openssl-dev \
  && npm install -g pnpm \
  && pnpm install --frozen-lockfile

COPY prisma ./prisma
ENV PRISMA_CLI_QUERY_ENGINE_TYPE=binary \
  PRISMA_QUERY_ENGINE_TYPE=binary
RUN pnpm exec prisma generate

COPY tsconfig*.json ./
COPY src ./src
RUN echo "=== Debug tsconfig ===" && \
  ls -la tsconfig* && \
  echo "=== Content tsconfig.build.json ===" && \
  cat tsconfig.build.json && \
  echo "=== Building ===" && \
  pnpm run build

# ───── production stage ─────
FROM node:18-alpine AS prod
WORKDIR /app

# ✅ Copiar apenas os artefatos necessários primeiro
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/prisma ./prisma

COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma/client ./node_modules/@prisma/client

# ✅ Instalar apenas prod dependencies na imagem final
COPY package.json pnpm-lock.yaml ./
RUN npm install -g pnpm \
  && pnpm install --prod --frozen-lockfile \
  && pnpm add tsconfig-paths \
  && pnpm store prune \
  && npm cache clean --force

# metadados mínimos pro tsconfig-paths
COPY tsconfig.base.json tsconfig.prod.json ./
# renomeia o prod para tsconfig.json
RUN mv tsconfig.prod.json tsconfig.json

ENV NODE_ENV=production

CMD ["node", "-r", "tsconfig-paths/register", "dist/main"]