# ───── build stage ─────
FROM node:18-alpine AS builder
WORKDIR /app

# 1) Instala pnpm e dependências (inclui @prisma/client e prisma CLI)
COPY package.json pnpm-lock.yaml ./
RUN apk add --no-cache openssl openssl-dev \
  && npm install -g pnpm \
  && pnpm install --frozen-lockfile

# 2) Copia schema e gera o client prisma
COPY prisma ./prisma
ENV PRISMA_CLI_QUERY_ENGINE_TYPE=binary \
  PRISMA_QUERY_ENGINE_TYPE=binary
RUN pnpm exec prisma generate

# 3) Copia código TS e faz build
COPY tsconfig*.json ./
COPY src ./src
RUN pnpm run build

# ───── production stage ─────
FROM node:18-alpine AS prod
WORKDIR /app

# 4) Instala pnpm e deps de produção (inclui tsconfig-paths)
RUN npm install -g pnpm
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --prod --frozen-lockfile \
  && pnpm add tsconfig-paths \
  && pnpm store prune \
  && npm cache clean --force

# 5) Copia a aplicação compilada
COPY --from=builder /app/dist ./dist

# 6) Copia todo o client prisma já gerado
#    — binários + query engine dentro de node_modules 
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma ./node_modules/@prisma

# 7) Copia configs de TS para resolver paths no runtime
COPY tsconfig.base.json ./
COPY tsconfig.prod.json ./tsconfig.json

# 8) Copia chaves JWT
COPY private.pem ./private.pem
COPY public.pem  ./public.pem

# 9) Expõe variáveis de ambiente pra sua config
ENV NODE_ENV=production
ENV JWT_PRIVATE_KEY_PATH=/app/private.pem
ENV JWT_PUBLIC_KEY_PATH=/app/public.pem

# 10) Comando final
CMD ["node", "-r", "tsconfig-paths/register", "dist/main"]