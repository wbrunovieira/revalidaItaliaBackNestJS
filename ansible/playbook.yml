---
- name: Deploy Backend via Ansible (produção)
  hosts: backend
  become: true
  vars:
    repo_url: 'https://github.com/wbrunovieira/revalidaItaliaBackNestJS.git'
    app_dir: /home/ubuntu/app
    compose_file: compose.prod.yml
    env_file: .env
    port: "{{ lookup('env','PORT') | default('3000') | int }}"

  pre_tasks:
    - name: Atualiza cache do apt
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Instala dependências de sistema
      apt:
        name:
          - docker.io
          - git
          - curl
          - jq
        state: present

    - name: Instala plugin Docker Compose V2
      get_url:
        url: https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64
        dest: /usr/local/lib/docker/cli-plugins/docker-compose
        mode: '0755'

    - name: Instala plugin Docker Buildx
      shell: |
        set -e
        LATEST=$(curl -s https://api.github.com/repos/docker/buildx/releases/latest | jq -r .tag_name)
        mkdir -p /usr/local/lib/docker/cli-plugins
        curl -sSL "https://github.com/docker/buildx/releases/download/${LATEST}/buildx-${LATEST}.linux-amd64" \
          -o /usr/local/lib/docker/cli-plugins/docker-buildx
        chmod +x /usr/local/lib/docker/cli-plugins/docker-buildx
      args:
        executable: /bin/bash

    - name: Adiciona ubuntu ao grupo docker
      user:
        name: ubuntu
        groups: docker
        append: yes

  tasks:
    - name: Clona ou atualiza o código-fonte
      git:
        repo: '{{ repo_url }}'
        dest: '{{ app_dir }}'
        version: main
        force: yes
      become_user: ubuntu

    - name: Inicia containers com Docker Compose V2 (pull+build sempre)
      community.docker.docker_compose_v2:
        project_src: '{{ app_dir }}'
        files:
          - '{{ compose_file }}'
        pull: missing # ou always, conforme sua preferência
        build: always # pode ser always, never ou policy
        state: present
        env_files:
          - '{{ app_dir }}/{{ env_file }}'
      become_user: ubuntu

    - name: Aguarda aplicação ficar disponível
      wait_for:
        host: localhost
        port: '{{ port }}'
        delay: 10
        timeout: 120

    - name: Testa endpoint de saúde
      uri:
        url: 'http://localhost:{{ port }}/health'
        method: GET
        status_code: 200
      register: health_check
      ignore_errors: yes
      become_user: ubuntu

  post_tasks:
    - name: Resultado do Deploy
      debug:
        msg: >
          🎉 Deploy concluído: {{ 'OK' if health_check.status == 200 else 'FAILED' }}
