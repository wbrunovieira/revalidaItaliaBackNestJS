---
- name: Deploy Backend via Ansible (produ√ß√£o)
  hosts: backend
  become: true
  collections:
    - community.docker
    - community.aws # necess√°rio para os m√≥dulos S3

  vars:
    repo_url: 'https://github.com/wbrunovieira/revalidaItaliaBackNestJS.git'
    app_dir: /home/ubuntu/app
    compose_file: compose.prod.yml

  pre_tasks:
    - name: Atualiza cache do apt
      apt:
        update_cache: yes

    - name: Instala depend√™ncias do sistema
      apt:
        name:
          - docker.io
          - git
          - curl
          - unzip
          - jq
          # boto3 para m√≥dulos AWS
          - python3-boto3
          - python3-botocore
        state: latest

    - name: Cria diret√≥rio de plugins do Docker
      file:
        path: /usr/local/lib/docker/cli-plugins
        state: directory
        mode: '0755'

    - name: Instala Docker Compose V2
      get_url:
        url: https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64
        dest: /usr/local/lib/docker/cli-plugins/docker-compose
        mode: '0755'

    - name: Adiciona ubuntu ao grupo docker
      user:
        name: ubuntu
        groups: docker
        append: yes

  tasks:
    - name: Clona ou atualiza o c√≥digo
      git:
        repo: '{{ repo_url }}'
        dest: '{{ app_dir }}'
        version: main
        force: yes
      become_user: ubuntu
      register: git_result

    - name: Instala Node.js e npm (via NodeSource)
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        apt-get install -y nodejs
      args:
        executable: /bin/bash

    - name: Instala pnpm globalmente
      shell: npm install -g pnpm
      args:
        executable: /bin/bash

    - name: Instala depend√™ncias do projeto
      shell: pnpm install
      args:
        chdir: '{{ app_dir }}'
        executable: /bin/bash

    - name: Cria diret√≥rio de storage local (fallback)
      file:
        path: '{{ app_dir }}/storage/documents'
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'
        recurse: yes

    - name: Gera arquivo de ambiente (.env)
      template:
        src: 'templates/.env.prod.j2'
        dest: '{{ app_dir }}/.env'
        owner: ubuntu
        group: ubuntu
        mode: '0600'
      become_user: ubuntu

    - name: Gera arquivos Prisma
      shell: pnpm exec prisma generate
      args:
        chdir: '{{ app_dir }}'
        executable: /bin/bash

    - name: Aplica migra√ß√µes
      shell: |
        set -a
        source {{ app_dir }}/.env
        set +a
        pnpm exec prisma migrate deploy
      args:
        chdir: '{{ app_dir }}'
        executable: /bin/bash

    # ---- SINCRONIZA√á√ÉO COM S3 USANDO M√ìDULO ANSIBLE ----

    - name: Sincroniza storage/documents ‚Üí S3
      community.aws.s3_sync:
        bucket: '{{ s3_bucket_name }}'
        file_root: '{{ app_dir }}/storage/documents/'
        key_prefix: 'documents/'
        mode: push
        region: '{{ s3_region }}'
        delete: no
      become_user: ubuntu

    # ----------------------------------------------------

    - name: Gera build do projeto
      shell: pnpm build
      args:
        chdir: '{{ app_dir }}'
        executable: /bin/bash

    - name: Garante diret√≥rio de logs do Postgres
      file:
        path: '{{ app_dir }}/logs/db'
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Faz pull da imagem com Docker Compose V2
      community.docker.docker_compose_v2_pull:
        project_src: '{{ app_dir }}'
        files:
          - '{{ compose_file }}'

    - name: Derruba containers antigos
      shell: docker compose -f {{ compose_file }} down
      args:
        chdir: '{{ app_dir }}'
      ignore_errors: yes

    - name: Build das imagens com Docker Compose (se houve mudan√ßa)
      shell: docker compose -f {{ compose_file }} build
      args:
        chdir: '{{ app_dir }}'
      when: git_result.after != git_result.before

    - name: Sobe os containers com Docker Compose V2
      community.docker.docker_compose_v2:
        project_src: '{{ app_dir }}'
        files:
          - '{{ compose_file }}'
        state: present

    - name: Aguarda aplica√ß√£o estar dispon√≠vel
      wait_for:
        host: localhost
        port: '{{ port }}'
        delay: 10
        timeout: 60

    - name: Testa endpoint de sa√∫de da aplica√ß√£o
      uri:
        url: 'http://localhost:{{ port }}/health'
        method: GET
        status_code: 200
      register: health_check
      ignore_errors: yes

    - name: Exibe status da aplica√ß√£o
      debug:
        msg: "Application Health: {{ 'OK' if health_check.status == 200 else 'FAILED' }}"

  post_tasks:
    - name: Resumo do Deploy
      debug:
        msg: |
          ======================================
          üéâ DEPLOY SUMMARY
          ======================================
          ‚úÖ Application: {{ 'Running' if health_check.status == 200 else 'Failed' }}
          üì¶ S3 Bucket: {{ s3_bucket_name }}
          üåê Backend IP: {{ ansible_default_ipv4.address }}
          üîó Backend URL: http://{{ ansible_default_ipv4.address }}:{{ port }}
          ======================================
