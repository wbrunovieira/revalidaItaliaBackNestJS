generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================
// = Entidades principais (agrupamentos)
// =====================================

model Track {
  id        String   @id @default(uuid())
  slug      String   @unique
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações:
  trackCourses TrackCourse[]
  translations TrackTranslation[]
}

model TrackCourse {
  track   Track  @relation(fields: [trackId], references: [id])
  trackId String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@id([trackId, courseId])
}

model Course {
  id        String   @id @default(uuid())
  slug      String   @unique
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações:
  modules      Module[]
  translations CourseTranslation[]
  videoLinks   CourseVideoLink[]

  trackCourses TrackCourse[]
}

model Module {
  id       String  @id @default(uuid())
  slug     String  @unique
  imageUrl String?
  order    Int

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações:

  lessons      Lesson[]
  translations ModuleTranslation[]
  videoLinks   ModuleVideoLink[]
}

model Video {
  id                String  @id @default(uuid())
  slug              String  @unique
  imageUrl          String?
  providerVideoId   String
  durationInSeconds Int

  lessonId String? @unique
  lesson   Lesson? @relation("LessonToVideo", fields: [lessonId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações:
  translations VideoTranslation[]
  videosSeen   VideoSeen[]
  videoLinks   VideoLink[]
}

// =======================================
// = Tabelas de tradução (multilíngue)
// =======================================

model TrackTranslation {
  id          String @id @default(uuid())
  locale      String
  title       String
  description String
  track       Track  @relation(fields: [trackId], references: [id])
  trackId     String

  @@unique([trackId, locale])
}

model CourseTranslation {
  id          String @id @default(uuid())
  locale      String // "pt", "it" ou "es"
  title       String
  description String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([courseId, locale])
}

model ModuleTranslation {
  id          String @id @default(uuid())
  locale      String // "pt", "it" ou "es"
  title       String
  description String

  module   Module @relation(fields: [moduleId], references: [id])
  moduleId String

  @@unique([moduleId, locale])
}

model VideoTranslation {
  id          String @id @default(uuid())
  locale      String // "pt", "it" ou "es"
  title       String
  description String

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  @@unique([videoId, locale])
}

// ===========================================
// = Tabelas de links de vídeo por idioma
// ===========================================

model VideoLink {
  id          String  @id @default(uuid())
  locale      String // "pt", "it" ou "es"
  streamUrl   String
  downloadUrl String?

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  @@unique([videoId, locale])
}

model CourseVideoLink {
  id     String @id @default(uuid())
  locale String // "pt", "it" ou "es"
  url    String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([courseId, locale])
}

model ModuleVideoLink {
  id     String @id @default(uuid())
  locale String // "pt", "it" ou "es"
  url    String

  module   Module @relation(fields: [moduleId], references: [id])
  moduleId String

  @@unique([moduleId, locale])
}

// ====================================
// = Demais entidades auxiliares
// ====================================

model VideoSeen {
  id     String   @id @default(uuid())
  seenAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  @@unique([userId, videoId])
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String
  cpf             String    @unique
  phone           String?
  paymentToken    String?
  birthDate       DateTime?
  lastLogin       DateTime?
  profileImageUrl String?
  role            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  Address                      Address[]
  videosSeen                   VideoSeen[]
  Attempt                      Attempt[]
  reviewedAnswers              AttemptAnswer[] @relation("ReviewedAnswers")
  flashcardInteractions        FlashcardInteraction[]
  flashcardInteractionContexts FlashcardInteractionContext[]
}

model Address {
  id         String   @id @default(uuid())
  userId     String
  street     String
  number     String
  complement String?
  district   String?
  city       String
  state      String?
  country    String
  postalCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Lesson {
  id           String              @id @default(uuid())
  slug         String              @unique
  moduleId     String
  module       Module              @relation(fields: [moduleId], references: [id])
  imageUrl     String?
  order        Int                 @default(1)
  video        Video?              @relation("LessonToVideo")
  flashcardIds String[]            @default([])
  commentIds   String[]            @default([])
  documents                    LessonDocument[]
  translations                 LessonTranslation[]
  lessonFlashcards             LessonFlashcard[]
  flashcardInteractionContexts FlashcardInteractionContext[]
  createdAt                    DateTime            @default(now())
  updatedAt                    DateTime            @updatedAt
  Assessment                   Assessment[]
}

model LessonTranslation {
  id          String  @id @default(uuid())
  locale      String // ex: "pt", "it", "es"
  title       String
  description String?

  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String

  @@unique([lessonId, locale])
}

model LessonDocument {
  id       String @id @default(uuid())
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String

  filename String?

  translations LessonDocumentTranslation[]

  createdAt DateTime @default(now())
}

model LessonDocumentTranslation {
  id          String  @id @default(uuid())
  locale      String
  title       String
  description String?
  url         String

  document   LessonDocument @relation(fields: [documentId], references: [id])
  documentId String

  @@unique([documentId, locale])
}

// ====================================
// = Enums para Assessment
// ====================================

enum AssessmentType {
  QUIZ
  SIMULADO
  PROVA_ABERTA
}

enum QuizPosition {
  BEFORE_LESSON
  AFTER_LESSON
}

enum QuestionType {
  MULTIPLE_CHOICE
  OPEN
}

enum AttemptStatus {
  IN_PROGRESS
  SUBMITTED
  GRADING
  GRADED
}

enum FlashcardContentType {
  TEXT
  IMAGE
}

enum FlashcardDifficultyLevel {
  EASY    // "Já sei" / "Lo so già" / "Ya lo sé"
  HARD    // "Difícil" / "Difficile" / "Difícil"  
  NEUTRAL // Não avaliado ainda
}

// ====================================
// = Entidades do domínio Assessment
// ====================================

model Assessment {
  id                 String         @id @default(uuid())
  slug               String         @unique
  title              String
  description        String?
  type               AssessmentType
  quizPosition       QuizPosition? // Apenas para tipo QUIZ
  passingScore       Int? // Nota mínima para aprovação (opcional para PROVA_ABERTA)
  timeLimitInMinutes Int? // Tempo limite (apenas para SIMULADO)
  randomizeQuestions Boolean        @default(false)
  randomizeOptions   Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  // Relações

  lesson   Lesson? @relation(fields: [lessonId], references: [id])
  lessonId String? // Opcional, apenas para QUIZ

  arguments Argument[]
  questions Question[]
  attempts  Attempt[]
}

model Argument {
  id    String @id @default(uuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  assessment   Assessment? @relation(fields: [assessmentId], references: [id])
  assessmentId String?

  questions Question[]
  flashcards Flashcard[]
}

model Question {
  id   String       @id @default(uuid())
  text String
  type QuestionType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  assessmentId String

  argument   Argument? @relation(fields: [argumentId], references: [id])
  argumentId String?

  options        QuestionOption[]
  answer         Answer?
  attemptAnswers AttemptAnswer[]
}

model QuestionOption {
  id String @id @default(uuid())

  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model Answer {
  id              String  @id @default(uuid())
  correctOptionId String? // Para múltipla escolha

  explanation String // Explicação do gabarito
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @unique

  translations AnswerTranslation[]
}

model AnswerTranslation {
  id          String @id @default(uuid())
  locale      String // "pt", "it", "es"
  explanation String // Tradução da explicação

  // Relações
  answer   Answer @relation(fields: [answerId], references: [id])
  answerId String

  @@unique([answerId, locale])
}

model Attempt {
  id     String        @id @default(uuid())
  status AttemptStatus

  startedAt          DateTime  @default(now())
  submittedAt        DateTime?
  gradedAt           DateTime?
  timeLimitExpiresAt DateTime? // Para simulados com tempo
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relações
  user   User   @relation(fields: [userId], references: [id])
  userId String

  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  assessmentId String

  answers AttemptAnswer[]

  @@index([userId, assessmentId])
}

model AttemptAnswer {
  id               String        @id @default(uuid())
  selectedOptionId String? // Para múltipla escolha
  textAnswer       String?
  status           AttemptStatus @default(IN_PROGRESS)
  isCorrect        Boolean? // Calculado para múltipla escolha, definido pelo professor para abertas

  // Campos para controle de versioning e feedback
  version        Int       @default(1) // Versão da resposta (1, 2, 3...)
  isLatest       Boolean   @default(true) // Apenas a última versão fica true
  teacherComment String? // Comentário do professor (questões abertas)
  submittedAt    DateTime? // Quando o aluno submeteu esta versão
  reviewedAt     DateTime? // Quando o professor revisou esta versão
  reviewerId     String? // ID do usuário que revisou (tutor/admin)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  attempt   Attempt @relation(fields: [attemptId], references: [id])
  attemptId String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  reviewer User? @relation("ReviewedAnswers", fields: [reviewerId], references: [id])

  // Índices para performance e busca de versões
  @@index([attemptId, questionId, isLatest])
  @@index([attemptId, questionId, version])
  @@index([reviewerId]) // Para queries de "minhas revisões"
  @@index([status, reviewerId]) // Para revisar pendências por reviewer
}

// ====================================
// = Entidades do domínio Flashcard
// ====================================

model Flashcard {
  id   String @id @default(uuid())
  slug String @unique

  // Conteúdo da pergunta
  questionText     String?
  questionImageUrl String?
  questionType     FlashcardContentType

  // Conteúdo da resposta
  answerText     String?
  answerImageUrl String?
  answerType     FlashcardContentType

  // Metadados para importação/exportação
  importBatchId String? // Para rastrear lotes importados
  exportedAt    DateTime? // Última exportação
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  argument   Argument @relation(fields: [argumentId], references: [id])
  argumentId String

  tags                     FlashcardTag[]
  interactions             FlashcardInteraction[]
  interactionContexts      FlashcardInteractionContext[]
  lessonFlashcards         LessonFlashcard[]

  // Índices para performance
  @@index([argumentId])
  @@index([questionType, answerType])
  @@index([importBatchId]) // Para queries de importação
  @@index([createdAt]) // Para stats temporais
}

model FlashcardTag {
  id   String @id @default(uuid())
  name String
  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  flashcards Flashcard[]

  // Índices para busca
  @@index([name])
}

model FlashcardInteraction {
  id              String                  @id @default(uuid())
  difficultyLevel FlashcardDifficultyLevel
  reviewedAt      DateTime                @default(now())

  // Relações
  user   User   @relation(fields: [userId], references: [id])
  userId String

  flashcard   Flashcard @relation(fields: [flashcardId], references: [id])
  flashcardId String

  // Controle de versioning para métricas
  @@unique([userId, flashcardId])
  @@index([userId, difficultyLevel])
  @@index([flashcardId, difficultyLevel])
  @@index([reviewedAt])
  @@index([userId, reviewedAt]) // Para stats de última revisão por usuário
}

model LessonFlashcard {
  id    String @id @default(uuid())
  order Int    @default(1) // Ordem do flashcard na lesson

  // Relações
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String

  flashcard   Flashcard @relation(fields: [flashcardId], references: [id])
  flashcardId String

  createdAt DateTime @default(now())

  // Constraint única para evitar duplicatas
  @@unique([lessonId, flashcardId])
  @@index([lessonId])
  @@index([flashcardId])
}

model FlashcardInteractionContext {
  id              String                   @id @default(uuid())
  difficultyLevel FlashcardDifficultyLevel
  reviewedAt      DateTime                 @default(now())

  // Relações
  user   User   @relation(fields: [userId], references: [id])
  userId String

  flashcard   Flashcard @relation(fields: [flashcardId], references: [id])
  flashcardId String

  lesson   Lesson? @relation(fields: [lessonId], references: [id])
  lessonId String? // Opcional - pode ser revisão livre

  // Métricas por contexto (lesson específica ou revisão livre)
  @@unique([userId, flashcardId, lessonId])
  @@index([userId, lessonId])
  @@index([flashcardId, lessonId])
  @@index([reviewedAt])
}
