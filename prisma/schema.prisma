generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================
// = Entidades principais (agrupamentos)
// =====================================

model Course {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações:
  modules      Module[]
  translations CourseTranslation[]
  videoLinks   CourseVideoLink[]
}

model Module {
  id    String @id @default(uuid())
  order Int

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações:
  videos       Video[]
  translations ModuleTranslation[]
  videoLinks   ModuleVideoLink[]
}

model Video {
  id                String @id @default(uuid())
  pandaVideoId      String // ID no Panda (arquivo original em PT)
  durationInSeconds Int

  module   Module @relation(fields: [moduleId], references: [id])
  moduleId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações:
  translations VideoTranslation[] // title/description em pt, it, es
  videosSeen   VideoSeen[]
  videoLinks   VideoLink[] // URLs por idioma (streaming/download)
}

// =======================================
// = Tabelas de tradução (multilíngue)
// =======================================

/// Traduções para Cursos (pt, it, es)
model CourseTranslation {
  id          String @id @default(uuid())
  locale      String // "pt", "it" ou "es"
  title       String
  description String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([courseId, locale])
}

/// Traduções para Módulos (pt, it, es)
model ModuleTranslation {
  id          String @id @default(uuid())
  locale      String // "pt", "it" ou "es"
  title       String
  description String

  module   Module @relation(fields: [moduleId], references: [id])
  moduleId String

  @@unique([moduleId, locale])
}

/// Traduções para Vídeos (pt, it, es)
model VideoTranslation {
  id          String @id @default(uuid())
  locale      String // "pt", "it" ou "es"
  title       String
  description String

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  @@unique([videoId, locale])
}

// ===========================================
// = Tabelas de links de vídeo por idioma
// ===========================================

/// URLs de vídeo diferentes por idioma (caso seja streaming + download)
model VideoLink {
  id          String  @id @default(uuid())
  locale      String // "pt", "it" ou "es"
  streamUrl   String // link para streaming
  downloadUrl String? // link para download (pode ficar nulo)

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  @@unique([videoId, locale])
}

/// URLs de vídeo por idioma no nível do curso (opcional)
model CourseVideoLink {
  id     String @id @default(uuid())
  locale String // "pt", "it" ou "es"
  url    String // link completo para player ou download

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([courseId, locale])
}

/// URLs de vídeo por idioma no nível do módulo (opcional)
model ModuleVideoLink {
  id     String @id @default(uuid())
  locale String // "pt", "it" ou "es"
  url    String

  module   Module @relation(fields: [moduleId], references: [id])
  moduleId String

  @@unique([moduleId, locale])
}

// ====================================
// = Demais entidades auxiliares
// ====================================

/// Relação “Usuário já viu Vídeo”
model VideoSeen {
  id     String   @id @default(uuid())
  seenAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  @@unique([userId, videoId])
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String
  cpf             String    @unique
  phone           String?
  paymentToken    String?
  birthDate       DateTime?
  lastLogin       DateTime?
  profileImageUrl String?
  role            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  Address    Address[]
  videosSeen VideoSeen[]
}

model Address {
  id         String   @id @default(uuid())
  userId     String
  street     String
  number     String
  complement String?
  district   String?
  city       String
  state      String?
  country    String
  postalCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
