// prisma/schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String
  cpf             String    @unique
  phone           String?
  paymentToken    String?
  birthDate       DateTime?
  lastLogin       DateTime?
  profileImageUrl String?
  role            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  Address    Address[]
  // Relacionamento para vídeos vistos (many-to-many pela tabela VideoSeen)
  videosSeen VideoSeen[]
}

model Address {
  id         String   @id @default(uuid())
  userId     String
  street     String
  number     String
  complement String?
  district   String?
  city       String
  state      String?
  country    String
  postalCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

/**
 * ────────────────────────────────────────────
 * | NOVAS TABELAS PARA O DOMÍNIO course-catalog |
 * ────────────────────────────────────────────
 */

/// Agregado raiz: Course
model Course {
  id          String   @id @default(uuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Um curso possui muitos módulos
  modules Module[]
}

/// Entidade Module, filha de Course
model Module {
  id        String   @id @default(uuid())
  title     String
  /// Posição/ordem do módulo dentro do curso
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com Course
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  // Um módulo possui vários vídeos
  videos Video[]
}

/// Entidade Video, filha de Module
model Video {
  id                String   @id @default(uuid())
  title             String
  pandaVideoId      String // ID retornado pelo Panda para streaming/armazenamento
  durationInSeconds Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relacionamento com Module
  module   Module @relation(fields: [moduleId], references: [id])
  moduleId String

  // Cada vídeo pode ter vários arquivos opcionais para download
  downloadableFiles DownloadableFile[]

  // Relacionamento para marcação de vídeo como visto (many-to-many com User)
  videosSeen VideoSeen[]
}

/// Tabela para armazenar detalhes de arquivos opcionais de download por vídeo
model DownloadableFile {
  id        String   @id @default(uuid())
  filename  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com Video
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String
}

/// Tabela de relacionamento para marcar "vídeo como visto" por usuário
/// (trata-se de um relacionamento many-to-many entre User e Video, com metadado seenAt)
model VideoSeen {
  id     String   @id @default(uuid())
  seenAt DateTime @default(now())

  // Relação com usuário
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Relação com vídeo
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  @@unique([userId, videoId]) // Garante que um usuário só possa marcar o mesmo vídeo como visto uma vez
}
