# Prompts Espec√≠ficos para Desenvolvimento

Este documento define prompts espec√≠ficos e padronizados para intera√ß√µes com a IA em cada etapa do desenvolvimento, garantindo consist√™ncia e efici√™ncia.

---

## 1. Criar Entidade

### Prompt:

"Leia o arquivo `project-reference-guide.md` e crie uma nova entidade DDD seguindo os padr√µes do projeto. Utilize os exemplos fornecidos como refer√™ncia, seguindo estrutura, m√©todos e valida√ß√µes. Pergunte caso haja d√∫vidas sobre as regras de neg√≥cio. Importante: sempre refatore completamente o arquivo ao atualiz√°-lo."

### Arquivos de Refer√™ncia:

- `src/domain/<dom√≠nio>/enterprise/entities/*.entity.ts`
- `prisma/schema.prisma`

---

Antes de come√ßar, sempre confirme:

- Exemplos e contexto j√° fornecidos.
- D√∫vidas sobre regras espec√≠ficas de neg√≥cio.
- Escopo detalhado e m√©todos necess√°rios.

## 2. Criar Interface e Reposit√≥rios (Prisma e In-Memory)

### Prompt:

"Leia o arquivo `project-reference-guide.md` e crie a interface do reposit√≥rio, a implementa√ß√£o Prisma e a implementa√ß√£o In-Memory, seguindo o padr√£o existente no projeto. Confirme antes se h√° m√©todos espec√≠ficos que precisam ser inclu√≠dos ou exclu√≠dos. Importante: sempre refatore completamente os arquivos ao atualiz√°-los."

### Arquivos de Refer√™ncia:

- `src/domain/<dom√≠nio>/application/repositories/i-*.repository.ts`
- `src/infra/database/prisma/repositories/prisma-*.repository.ts`
- `src/test/repositories/in-memory-*.repository.ts`

Antes de come√ßar, sempre confirme:

- Exemplos e contexto j√° fornecidos.
- D√∫vidas sobre regras espec√≠ficas de neg√≥cio.
- Escopo detalhado e m√©todos necess√°rios.

---

## 3. Criar Use-Case (DTOs, Schema e Teste Unit√°rio)

### Prompt:

"Leia o arquivo `project-reference-guide.md` e crie um novo Use-Case, incluindo DTOs necess√°rios, schema de valida√ß√£o Zod, e testes unit√°rios abrangendo casos de erro, edge cases e inputs inv√°lidos. Antes de iniciar, valide se todos os m√©todos necess√°rios existem nos reposit√≥rios, e caso necess√°rio, sugira m√©todos adicionais.

**Ap√≥s a cria√ß√£o:**

1. **Registrar no Module:** Adicione o Use-Case no module correspondente seguindo o padr√£o do projeto
2. **Executar teste:** Execute o teste com o comando `docker exec -it ead-backend-dev sh -c "pnpm test src/path/to/use-case.spec.ts"`

**üö® PRINC√çPIO CR√çTICO DE TESTES UNIT√ÅRIOS USE-CASE:**
Quando testes unit√°rios do use-case falham, **SEMPRE** corrija o sistema/implementa√ß√£o para fazer os testes passarem, **NUNCA** ajuste os testes para corresponder ao comportamento incorreto. Os testes unit√°rios representam as regras de neg√≥cio esperadas.

**Localiza√ß√£o das corre√ß√µes conforme responsabilidades DDD:**
- **Falha na valida√ß√£o de entrada:** Corrigir schema Zod em `use-cases/validations/`
- **Falha na l√≥gica de neg√≥cio:** Corrigir o use-case em `application/use-cases/`
- **Falha nas regras de dom√≠nio:** Corrigir entidades em `enterprise/entities/`
- **Falha na integra√ß√£o:** Corrigir reposit√≥rios em `infra/database/prisma/repositories/`

Importante: sempre refatore completamente os arquivos ao atualiz√°-los."

### Arquivos de Refer√™ncia:

- `src/domain/<dom√≠nio>/application/use-cases/*.use-case.ts`
- `src/domain/<dom√≠nio>/application/dtos/*.dto.ts`
- `src/domain/<dom√≠nio>/application/use-cases/validations/*.schema.ts`
- `src/domain/<dom√≠nio>/application/use-cases/*.use-case.spec.ts`
- `src/domain/<dom√≠nio>/application/repositories/i-*.repository.ts`
- `src/infra/database/prisma/repositories/prisma-*.repository.ts`
- `src/test/repositories/in-memory-*.repository.ts`

Antes de come√ßar, sempre confirme:

- Exemplos e contexto j√° fornecidos.
- D√∫vidas sobre regras espec√≠ficas de neg√≥cio.
- Escopo detalhado e m√©todos necess√°rios.

---

## 4. Criar Controller e Teste Unit√°rio da Rota

### Prompt:

"Leia o arquivo `project-reference-guide.md` e crie ou atualize o Controller e a rota associada ao Use-Case especificado. Inclua as valida√ß√µes usando class-validator e crie os testes unit√°rios para a rota.

**Verifica√ß√µes obrigat√≥rias:**
a) **Module:** Verifique se existe o module do controller. Se n√£o existir, crie seguindo o padr√£o:

```typescript
@Module({
  controllers: [ControllerName],
  providers: [
    UseCaseName,
    {
      provide: 'RepositoryInterface',
      useClass: PrismaRepositoryImplementation,
    },
  ],
})
export class ModuleName {}
```

b) **Executar teste:** Ap√≥s cria√ß√£o, execute `docker exec -it ead-backend-dev sh -c "pnpm test src/infra/controllers/tests/controller-name/verb-controller.spec.ts"`

**üö® PRINC√çPIO CR√çTICO DE TESTES UNIT√ÅRIOS CONTROLLER:**
Quando testes unit√°rios do controller falham, **SEMPRE** corrija o sistema/implementa√ß√£o para fazer os testes passarem, **NUNCA** ajuste os testes para corresponder ao comportamento incorreto. Os testes unit√°rios representam o comportamento esperado da API.

**Localiza√ß√£o das corre√ß√µes conforme responsabilidades DDD:**
- **Falha na valida√ß√£o de entrada:** Corrigir DTOs em `controllers/dtos/` (class-validator)
- **Falha no mapeamento de dados:** Corrigir o controller em `controllers/`
- **Falha no tratamento de erros:** Corrigir exception filters em `filters/`
- **Falha na integra√ß√£o com use-case:** Corrigir chamadas no controller
- **Falha na resposta HTTP:** Corrigir status codes e estrutura de resposta

c) **Request file:** Verifique se existe arquivo em `requests/controller-name.http` e adicione a rota de forma simples, seguindo o padr√£o existente

d) **Dev setup:** Adicione a rota em `requests/dev-setup/` se necess√°rio, refatorando o script para incluir a nova funcionalidade. Se modificar o dev-setup, execute o seed: `docker exec ead-backend-dev pnpm seed:dev`

e) **Testar sistema:** Ap√≥s todas as altera√ß√µes, reinicie o sistema Docker para verificar se tudo est√° funcionando:

**Estrutura de testes:** Se ainda n√£o existir, crie o diret√≥rio `shared/` dentro de `src/infra/controllers/tests/<controller-name>/` contendo:

- `*-controller-test-setup.ts` (configura√ß√£o de mocks e inst√¢ncias)
- `*-controller-test-helpers.ts` (m√©todos auxiliares para testes)
- `*-controller-test-data.ts` (dados de teste organizados)

Crie um arquivo espec√≠fico para cada verbo HTTP (ex: `get-*.controller.spec.ts`, `post-*.controller.spec.ts`, `put-*.controller.spec.ts`, `delete-*.controller.spec.ts`) seguindo o padr√£o estabelecido no projeto.

Importante: sempre refatore completamente os arquivos ao atualiz√°-los."

### Arquivos de Refer√™ncia:

- `src/infra/controllers/*.controller.ts`
- `src/infra/controllers/tests/<controller-name>/shared/*.ts`
- `src/infra/controllers/tests/<controller-name>/<verb>-*.controller.spec.ts`

Antes de come√ßar, sempre confirme:

- Exemplos e contexto j√° fornecidos.
- D√∫vidas sobre regras espec√≠ficas de neg√≥cio.
- Escopo detalhado e m√©todos necess√°rios.

---

## 5. Criar Teste E2E

### Prompt:

"Leia o arquivo `project-reference-guide.md` e crie um teste E2E completo usando Vitest e Supertest para a nova rota criada. Garanta que cubra o fluxo feliz, cen√°rios de erro e valida√ß√µes detalhadas.

**Estrutura de testes E2E:** Se ainda n√£o existir, crie o diret√≥rio `<controller-name>/` dentro de `test/e2e/` contendo:

- `shared/` com arquivos auxiliares para setup, helpers e dados de teste
- Um arquivo espec√≠fico para cada verbo HTTP (ex: `get-*.e2e.spec.ts`, `post-*.e2e.spec.ts`, `put-*.e2e.spec.ts`, `delete-*.e2e.spec.ts`)

**Tarefa final:** Executar o teste com o comando `docker exec -it ead-backend-dev sh -c "pnpm test:e2e test/e2e/controller-name/verb-endpoint.e2e.spec.ts"`

**üö® PRINC√çPIO CR√çTICO DE TESTES E2E:**
Quando testes E2E falham, **SEMPRE** corrija o sistema/implementa√ß√£o para fazer os testes passarem, **NUNCA** ajuste os testes para corresponder ao comportamento incorreto. Os testes E2E representam a verdadeira especifica√ß√£o do sistema e devem ser a fonte de verdade.

**Localiza√ß√£o das corre√ß√µes conforme responsabilidades DDD:**
- **Falha na valida√ß√£o de entrada:** Corrigir DTOs (`controllers/dtos/`) e schemas Zod (`use-cases/validations/`)
- **Falha no processamento de dados:** Corrigir use-cases em `application/use-cases/`
- **Falha nas regras de neg√≥cio:** Corrigir entidades em `enterprise/entities/`
- **Falha na persist√™ncia:** Corrigir reposit√≥rios em `infra/database/prisma/repositories/`
- **Falha na resposta HTTP:** Corrigir controllers em `controllers/` e filtros em `filters/`
- **Falha na integra√ß√£o entre camadas:** Verificar inje√ß√£o de depend√™ncias em modules
- **Falha na configura√ß√£o:** Corrigir setup de testes, configura√ß√µes de banco, ValidationPipes

**Ordem de investiga√ß√£o DDD:**
1. **Infrastructure ‚Üí Application:** Verificar se dados chegam corretamente ao use-case
2. **Application ‚Üí Domain:** Verificar se regras de neg√≥cio est√£o sendo aplicadas
3. **Domain ‚Üí Infrastructure:** Verificar se dados s√£o persistidos corretamente
4. **End-to-End:** Verificar se resposta HTTP est√° no formato esperado

Antes de iniciar, confirme os cen√°rios obrigat√≥rios a serem testados. Importante: sempre refatore completamente o arquivo ao atualiz√°-lo."

### Arquivos de Refer√™ncia:

- `test/e2e/<controller-name>/<verb>-*.e2e.spec.ts`
- `test/e2e/<controller-name>/shared/*.ts`promp
- `test/e2e/shared/*.ts` (utilit√°rios globais)

- Exemplos e contexto j√° fornecidos.
- D√∫vidas sobre regras espec√≠ficas de neg√≥cio.
- Escopo detalhado e m√©todos necess√°rios.

---

## üö® PRINC√çPIO CR√çTICO UNIVERSAL - TESTES COMO ESPECIFICA√á√ÉO

**REGRA FUNDAMENTAL:** Em TODOS os tipos de testes (unit√°rios, integra√ß√£o, E2E), quando um teste falha, **SEMPRE** corrija o sistema/implementa√ß√£o para fazer o teste passar, **NUNCA** ajuste o teste para corresponder ao comportamento incorreto.

### Hierarquia de Responsabilidades DDD:

**1. Domain Layer (Regras de Neg√≥cio):**
- `enterprise/entities/` - Regras de dom√≠nio, valida√ß√µes, transforma√ß√µes
- `enterprise/value-objects/` - Objetos de valor imut√°veis

**2. Application Layer (Casos de Uso):**
- `application/use-cases/` - Orquestra√ß√£o de regras de neg√≥cio
- `application/use-cases/validations/` - Valida√ß√£o de entrada (Zod)
- `application/dtos/` - Contratos de entrada/sa√≠da
- `application/repositories/` - Interfaces de persist√™ncia

**3. Infrastructure Layer (Detalhes T√©cnicos):**
- `controllers/` - Entrada HTTP, mapeamento de dados
- `controllers/dtos/` - Valida√ß√£o HTTP (class-validator)
- `filters/` - Tratamento de exce√ß√µes HTTP
- `database/prisma/repositories/` - Implementa√ß√£o de persist√™ncia

### Fluxo de Corre√ß√£o:
1. **Identifique a camada respons√°vel** pela funcionalidade que est√° falhando
2. **Corrija a implementa√ß√£o** na camada apropriada
3. **Mantenha a consist√™ncia** entre todas as camadas
4. **Valide** que a corre√ß√£o n√£o quebra outros testes

---

## Checklist para todos os Prompts:

Antes de come√ßar, sempre confirme:

- Exemplos e contexto j√° fornecidos.
- D√∫vidas sobre regras espec√≠ficas de neg√≥cio.
- Escopo detalhado e m√©todos necess√°rios.
